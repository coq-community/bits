---
fullname: Bits
shortname: bits
organization: coq-community
community: true
action: true
coqdoc: false
doi: 10.1007/978-3-319-29604-3_2

synopsis: >-
  Coq bit vector library

description: |-
  A formalization of bitset operations in Coq with a corresponding
  axiomatization and extraction to OCaml native integers.

publications:
- pub_url: https://hal.archives-ouvertes.fr/hal-01251943/document
  pub_title: "From Sets to Bits in Coq"
  pub_doi: 10.1007/978-3-319-29604-3_2
- pub_url: https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/coqasm.pdf
  pub_title: "Coq: The world's best macro assembler?"
  pub_doi: 10.1145/2505879.2505897

authors:
- name: Andrew Kennedy
  email: akenn@microsoft.com
  initial: true
- name: Arthur Blot
  email: arthur.blot@ens-lyon.fr
  initial: true
- name: Pierre-Évariste Dagand
  email: pierre-evariste.dagand@lip6.fr
  initial: true

maintainers:
- name: Anton Trunov
  nickname: anton-trunov

opam-file-maintainer: anton.a.trunov@gmail.com

opam-file-version: dev

license:
  fullname: Apache License 2.0
  identifier: Apache-2.0
  file: LICENSE

supported_coq_versions:
  text: 8.16 or later (use releases for other Coq versions)
  opam: '{>= "8.16"}'

tested_coq_opam_versions:
- version: '2.0.0-coq-8.16'
  repo: 'mathcomp/mathcomp'
- version: '2.0.0-coq-8.18'
  repo: 'mathcomp/mathcomp'
- version: '2.1.0-coq-8.16'
  repo: 'mathcomp/mathcomp'
- version: '2.1.0-coq-8.18'
  repo: 'mathcomp/mathcomp'
- version: '2.2.0-coq-8.16'
  repo: 'mathcomp/mathcomp'
- version: '2.2.0-coq-8.19'
  repo: 'mathcomp/mathcomp'
- version: '2.2.0-coq-dev'
  repo: 'mathcomp/mathcomp'
- version: 'coq-8.19'
  repo: 'mathcomp/mathcomp-dev'
- version: 'coq-dev'
  repo: 'mathcomp/mathcomp-dev'

dependencies:
- opam:
    name: ocamlbuild
  description: OCamlbuild
- opam:
    name: coq-mathcomp-algebra
    version: '{>= "2.0"}'
  description: |-
    [MathComp](https://math-comp.github.io) 2.0 or later (`algebra` suffices)

namespace: Bits

keywords:
- name: bit arithmetic
- name: bitset
- name: bit vector
- name: extraction

categories:
- name: Computer Science/Data Types and Data Structures

documentation: |-
  ## Origins

  This library has been extracted from Andrew Kennedy et al. ['x86proved' fork][xprovedkennedy].
  This link presently redirects to https://github.com/nbenton/x86proved repository.

  The main paper for this project is [Coq: The world’s best macro assembler?][coqasm].

  ## Using the library

  To import the main library, do:
  ```coq
  From Bits Require Import bits.
  ```

  An axiomatic interface supporting efficient extraction to OCaml can be
  loaded with:
  ```coq
  From Bits Require Import extraction.axioms8.  (* or 16 or 32 *)
  ```

  ## Organization

  This library, briefly described in the paper [From Sets to Bits in Coq][bitstosets],
  helps to model operations on bitsets. It's a formalization of
  logical and arithmetic operations on bit vectors. A bit vector is defined as an
  SSReflect tuple of bits, i.e. a list of booleans of fixed (word) size.

  The key abstractions offered by this library are as follows:
  - `BITS n : Type` - vector of `n` bits
  - `getBit bs k` - test the `k`-th bit of `bs` bit vector
  - `andB xs ys` - bitwise "and"
  - `orB xs ys` - bitwise "or"
  - `xorB xs ys` - bitwise "xor"
  - `invB xs` - bitwise negation
  - `shrB xs k` - right shift by `k` bits
  - `shlB xs k` - left shift by `k` bits

  The library characterizes the interactions between these elementary operations
  and provides embeddings to and from the additive group ℤ/(2ⁿ)ℤ.

  The overall structure of the code is as follows:
  - [src/ssrextra](src/ssrextra): complements to the [Mathcomp][mathcomp] library
  - [src/spec](src/spec): specification of bit vectors
  - [src/extraction](src/extraction): axiomatic interface to OCaml, for extraction

  For a specific formalization developed in a file `A.v`, one will find its
  associated properties in the file `A/properties.v`. For example, bit-level
  operations are defined in [src/spec/operations.v](src/spec/operations.v),
  therefore their properties can be found in
  [src/spec/operations/properties.v](src/spec/operations/properties.v).

  ## Verification axioms

  Axioms can be verified for 8-bit and 16-bit (using only extracted code) using
  the following command:
  ```shell
  make verify
  ```

  For 8bit, the verification process should finish in few seconds. However
  for 16-bit, depending on your computer speed, it could take more than 6
  hours.

  [bitstosets]: https://hal.archives-ouvertes.fr/hal-01251943/document
  [coqasm]: https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/coqasm.pdf
  [xprovedkennedy]: https://x86proved.codeplex.com/SourceControl/network/forks/andrewjkennedy/x86proved/latest#src/bits.v
  [mathcomp]: https://github.com/math-comp/math-comp
---
